name: cr4wlr CI/CD

on:
  push:
    branches: ["**"]         # run on all branches
    tags: [ "v*" ]           # e.g. v0.1.0 → PyPI + Release
  pull_request:
    branches: ["**"]
  workflow_dispatch:          # manual trigger button in Actions tab

jobs:
  build-test-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest flake8 mypy build twine

      - name: Lint with flake8
        run: flake8 . --max-line-length=120 --exclude=.venv,.git,__pycache__,build,dist

      - name: Type check with mypy
        run: mypy cr4wlr || true   # don’t fail on warnings

      - name: Run tests
        run: pytest -q

      - name: Run reference check (script)
        run: |
          if [ -f check_remaining_refs.py ]; then
            python check_remaining_refs.py || true
          fi

      - name: Run reference check (grep)
        run: |
          if grep -R "crawl4ai" . \
            --include=*.py --include=*.toml --include=*.md \
            --include=*.yml --include=*.yaml; then
            echo "❌ Found old crawl4ai references."
            exit 1
          else
            echo "✅ No crawl4ai references found."
          fi

      - name: Build package
        run: python -m build

      - name: Upload dist artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cr4wlr-dist
          path: dist/*

  publish-testpypi:
    needs: build-test-lint
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - run: python -m pip install --upgrade pip build twine
      - run: python -m build
      - run: twine upload --repository testpypi dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}

  publish-pypi:
    needs: build-test-lint
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - run: python -m pip install --upgrade pip build twine
      - run: python -m build
      - run: twine upload dist/*
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}

  docker:
    needs: build-test-lint
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/cr4wlr:latest
            ghcr.io/${{ github.repository_owner }}/cr4wlr:${{ github.sha }}

  github-release:
    needs: [publish-pypi, docker]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: cr4wlr-dist
          path: dist

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
